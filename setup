var Engine = Matter.Engine,
	Render = Matter.Render,
	Runner = Matter.Runner,
	Bodies = Matter.Bodies,
	Body = Matter.Body,
	Composite = Matter.Composite,
	Constraint = Matter.Constraint,
	Mouse = Matter.Mouse,
	MouseConstraint = Matter.MouseConstraint,
	Vector = Matter.Vector,
	Events = Matter.Events





function setup() {
	//the game engine
	angleMode(DEGREES)
	engine = Engine.create();
	render = Render.create({
		element: document.body,
		engine: engine,
		options: {
			width: innerWidth,
			height: innerHeight,
			wireframes: false, // <-- important
			background: 'sky-1286888_1280.jpg'

		}
	});

	// This lets use draw on the canvas using processing's (non-physics) drawing tools
	createCanvas(windowWidth, windowHeight, render.canvas)

	// create two boxes and a ground
	var boxA = Bodies.circle(400, 300, 80, {
		isStatic: true,
		render: {

		}
	});
	var LP = 0x0001;
	var RP = 0x0004;
	var G3 = 0x0002;
	var Ball = 0x0003;


	ball = Bodies.circle(windowWidth / 2, windowHeight / 8, 80, {
		friction: 0.002,
		restitution: 1.25,
		mass: 3.0,
		frictionAir: 0.015,
		collisionFilter: {
			category: Ball,
			mask: LP | RP
		},
		render: {
			sprite: {
				texture: "vibrant-red-dodgeball-with-textured-surface-cut-out-transparent-png.webp",
				xScale: 0.2,
				yScale: 0.2
			}
		}
	});

	//right ground
	ground = Bodies.rectangle(windowWidth / 1.334, windowHeight - 60, windowWidth / 2, 60, {
		isStatic: true,
		friction: 50
	});

	// left ground
	ground2 = Bodies.rectangle(windowWidth / 4, windowHeight - 60, windowWidth / 2, 60, {
		isStatic: true,
		friction: 50
	});

	var collisionFilter = Matter.Collision




	var wall = Bodies.rectangle(0, 540, 10, 11000, {
		isStatic: true,
		friction: 50
	});
	var wall2 = Bodies.rectangle(windowWidth, 540, 10, 11000, {
		isStatic: true,
		friction: 50
	});
	var net = Bodies.rectangle(windowWidth / 2, windowHeight / 2 + 275, 50, 500, {
		isStatic: true,
		friction: 1,

	});




paddleLeft = Bodies.polygon(windowWidth / 4, windowHeight / 2, 3, 110, {
  isStatic: false,
  friction: 0.001,
  collisionFilter: {
    category: LP,
    mask: G3 | RP | Ball
  },
  render: {
    fillStyle: 'orange'
  }
});
	
	paddleRight = Bodies.polygon(windowWidth / 1.3, windowHeight / 2, 3, 110, {
  isStatic: false,
  friction: 0.001,
  collisionFilter: {
    category: RP,
    mask: G3 | LP | Ball
  },
  render: {
    fillStyle: 'blue'
  }
});
	
	// transparent wall only ball can go through
	ground3 = Bodies.rectangle(windowWidth / 2, 0, 50, windowHeight + 50, {
		isStatic: true,
		friction: 50,
		render: {
			fillStyle: "rgba(242,238,239,0)",
		},

		collisionFilter: {
			category: G3,
			mask: LP | RP

		}
	});


	// add all of the bodies to the world
	Composite.add(engine.world, [wall, wall2, paddleLeft, paddleRight, ground, ground2, net, ball, ground3]);

	// run the renderer
	Render.run(render);

	// create runner
	runner = Runner.create();

	// run the engine
	// Runner.run(runner, engine);



}

function preload() {
	backround = loadImage("sky-1286888_1280.jpg")
	failscreen = loadImage('sky-1286888_1280.jpg')
}
